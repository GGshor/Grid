[{"title":"Client","type":0,"sectionRef":"#","url":"/Grid/api/Client","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client","url":"/Grid/api/Client#functions","content":" "},{"title":"BindEvents​","type":1,"pageTitle":"Client","url":"/Grid/api/Client#BindEvents","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Client:BindEvents( pre: {[string]: () → ()}?, callbacks: {[string]: () → ()} ) → () Binds callbacks to event  "},{"title":"BindFunctions​","type":1,"pageTitle":"Client","url":"/Grid/api/Client#BindFunctions","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Client:BindFunctions( pre: {[string]: () → ()}?, callbacks: {[string]: () → ()} ) → () Binds callbacks to function "},{"title":"Server","type":0,"sectionRef":"#","url":"/Grid/api/Server","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server","url":"/Grid/api/Server#functions","content":" "},{"title":"BindEvents​","type":1,"pageTitle":"Server","url":"/Grid/api/Server#BindEvents","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server:BindEvents( pre: {[string]: () → ()}?, callbacks: {[string]: () → ()} ) → () Binds callbacks to event  "},{"title":"BindFunctions​","type":1,"pageTitle":"Server","url":"/Grid/api/Server#BindFunctions","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server:BindFunctions( pre: {[string]: () → ()}?, callbacks: {[string]: () → ()} ) → () Binds callbacks to function "},{"title":"Shared","type":0,"sectionRef":"#","url":"/Grid/api/Shared","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#functions","content":" "},{"title":"DebugPrint​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#DebugPrint","content":"&lt;/&gt; Shared.DebugPrint( ...: any-- The message you want to print ) → () Adds the prefix to print  "},{"title":"DebugWarn​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#DebugWarn","content":"&lt;/&gt; Shared.DebugWarn( ...: any-- The message you want to print ) → () Adds the prefix to warn  "},{"title":"GetParametersString​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#GetParametersString","content":"&lt;/&gt; Shared.GetParametersString(...: any) → string-- Paramameters formatted into a string Turns paramameters into a string  "},{"title":"GetCommunications​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#GetCommunications","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Shared.GetCommunications() → Types.Communications-- The communication folders Waits for communication folders to exist or creates them.  "},{"title":"YieldThread​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#YieldThread","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Shared.YieldThread() → any-- Returns what yield returned Yields the current thread -- TODO: Improve thread handling  "},{"title":"ResumeThread​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#ResumeThread","content":"&lt;/&gt; Shared.ResumeThread( thread: Thread,-- The thread you want to resume ...: any-- What you want to return to the thread ) → () Resumes the current thread -- TODO: Improve thread handling  "},{"title":"SafeInvokeCallback​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#SafeInvokeCallback","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Shared.SafeInvokeCallback( handler: Types.FunctionHandler, ...: any-- The arguments you want to invoke with ) → ...any-- The response from invoke Calls callback(...) in a separate thread and returns false if it errors or invoking client leaves the game. Fail state is only checked every 0.5 seconds, so don't expect errors to return immediately "},{"title":"Errors","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared##","content":"Type\tDescription&quot;Any&quot;\tThe client can leave while invoke  "},{"title":"SafeFireEvent​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#SafeFireEvent","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Shared.SafeFireEvent( handler: Types.EventHandler, ...: any-- The arguments you want to fire with ) → () Goes through all callbacks in the handler and runs them with the given arguments.  "},{"title":"WaitForChild​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#WaitForChild","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Shared.WaitForChild( parent: Instance ,-- The instance the child should be parented to name: string-- The name of the child ) → Instance  Waits for the child with infinite yield. Regular WaitForChild had issues with order (RemoteEvents were going through before WaitForChild resumed)  "},{"title":"GetEventHandler​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#GetEventHandler","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Shared.GetEventHandler( name: string-- The name of the event handler. ) → Types.EventHandler Searches for the event handler and makes one if it doesn't exists yet.  "},{"title":"GetFunctionHandler​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#GetFunctionHandler","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Shared.GetFunctionHandler( name: string-- The name of the function handler. ) → Types.FunctionHandler Searches for the function handler and makes one if it doesn't exists yet.  "},{"title":"ExecuteDeferredHandlers​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#ExecuteDeferredHandlers","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Shared.ExecuteDeferredHandlers() → () Runs all the deffered handlers.  "},{"title":"MatchParams​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#MatchParams","content":"&lt;/&gt; Shared.MatchParams( event: string,-- The event paramTypes: {any}-- The types to check for ) → () Match parameters  "},{"title":"CombineFunctions​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#CombineFunctions","content":"&lt;/&gt; Shared.CombineFunctions( handler: Types.EventHandler, finalCallback: {(...any) → ()} | (...any) → (), ...: any? ) → (...any) → () Combines handler with a callback and logs it if logging exists  "},{"title":"SafeInvoke​","type":1,"pageTitle":"Shared","url":"/Grid/api/Shared#SafeInvoke","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Shared.SafeInvoke( timeout: number?, handler: Types.FunctionHandler, ...: any-- The arguments you want to push through to client ) → ( boolean, ...any ) Safely invokes a with a possible timeout "}]