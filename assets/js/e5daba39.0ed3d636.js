"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[261],{13655:e=>{e.exports=JSON.parse('{"functions":[{"name":"DebugPrint","desc":"Adds the prefix to print","params":[{"name":"...","desc":"The message you want to print","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":47,"path":"src/Shared.lua"}},{"name":"DebugWarn","desc":"Adds the prefix to warn","params":[{"name":"...","desc":"The message you want to print","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":56,"path":"src/Shared.lua"}},{"name":"GetParametersString","desc":"Turns paramameters into a string","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"Paramameters formatted into a string","lua_type":"string"}],"function_type":"static","source":{"line":67,"path":"src/Shared.lua"}},{"name":"GetCommunications","desc":"Waits for communication folders to exist or creates them.","params":[],"returns":[{"desc":"The communication folders","lua_type":"Types.Communications"}],"function_type":"static","yields":true,"source":{"line":98,"path":"src/Shared.lua"}},{"name":"YieldThread","desc":"Yields the current thread\\n\\n\\n\\n-- TODO: Improve thread handling","params":[],"returns":[{"desc":"Returns what yield returned","lua_type":"any"}],"function_type":"static","yields":true,"source":{"line":147,"path":"src/Shared.lua"}},{"name":"ResumeThread","desc":"Resumes the current thread\\n\\n-- TODO: Improve thread handling","params":[{"name":"thread","desc":"The thread you want to resume","lua_type":"Thread"},{"name":"...","desc":"What you want to return to the thread","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":165,"path":"src/Shared.lua"}},{"name":"SafeInvokeCallback","desc":"Calls callback(...) in a separate thread and returns false if it errors or invoking client leaves the game.\\n\\nFail state is only checked every 0.5 seconds, so don\'t expect errors to return immediately","params":[{"name":"handler","desc":"","lua_type":"Types.FunctionHandler"},{"name":"...","desc":"The arguments you want to invoke with","lua_type":"any"}],"returns":[{"desc":"The response from invoke","lua_type":"...any"}],"function_type":"static","errors":[{"lua_type":"\\"Any\\"","desc":"The client can leave while invoke"}],"yields":true,"source":{"line":183,"path":"src/Shared.lua"}},{"name":"SafeFireEvent","desc":"Goes through all callbacks in the handler and runs them with the given arguments.","params":[{"name":"handler","desc":"","lua_type":"Types.EventHandler"},{"name":"...","desc":"The arguments you want to fire with","lua_type":"any"}],"returns":[],"function_type":"static","yields":true,"source":{"line":238,"path":"src/Shared.lua"}},{"name":"WaitForChild","desc":"Waits for the child with infinite yield.\\n\\nRegular WaitForChild had issues with order (RemoteEvents were going through before WaitForChild resumed)","params":[{"name":"parent","desc":"The instance the child should be parented to","lua_type":"Instance"},{"name":"name","desc":"The name of the child","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Instance\\r\\n"}],"function_type":"static","yields":true,"source":{"line":268,"path":"src/Shared.lua"}},{"name":"GetEventHandler","desc":"Searches for the event handler and makes one if it doesn\'t exists yet.","params":[{"name":"name","desc":"The name of the event handler.","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Types.EventHandler"}],"function_type":"static","yields":true,"source":{"line":298,"path":"src/Shared.lua"}},{"name":"GetFunctionHandler","desc":"Searches for the function handler and makes one if it doesn\'t exists yet.","params":[{"name":"name","desc":"The name of the function handler.","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Types.FunctionHandler"}],"function_type":"static","yields":true,"source":{"line":381,"path":"src/Shared.lua"}},{"name":"ExecuteDeferredHandlers","desc":"Runs all the deffered handlers.","params":[],"returns":[],"function_type":"static","yields":true,"source":{"line":460,"path":"src/Shared.lua"}},{"name":"MatchParams","desc":"Match parameters","params":[{"name":"event","desc":"The event","lua_type":"string"},{"name":"paramTypes","desc":"The types to check for","lua_type":"{any}"}],"returns":[],"function_type":"static","source":{"line":495,"path":"src/Shared.lua"}},{"name":"CombineFunctions","desc":"Combines handler with a callback and logs it if logging exists","params":[{"name":"handler","desc":"","lua_type":"Types.EventHandler"},{"name":"finalCallback","desc":"","lua_type":"{ (...any) -> () } | (...any) -> ()"},{"name":"...","desc":"","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"(...any) -> ()"}],"function_type":"static","source":{"line":562,"path":"src/Shared.lua"}},{"name":"SafeInvoke","desc":"Safely invokes a with a possible timeout","params":[{"name":"timeout","desc":"","lua_type":"number?"},{"name":"handler","desc":"","lua_type":"Types.FunctionHandler"},{"name":"...","desc":"The arguments you want to push through to client","lua_type":"any"}],"returns":[{"desc":"","lua_type":"(boolean, ...any)"}],"function_type":"static","yields":true,"source":{"line":619,"path":"src/Shared.lua"}}],"properties":[],"types":[],"name":"Shared","desc":"","source":{"line":10,"path":"src/Shared.lua"}}')}}]);